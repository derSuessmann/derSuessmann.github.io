<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>derSuessmann</title><link>https://derSuessmann.github.io/</link><description>Everything is beta here...</description><atom:link rel="self" href="https://derSuessmann.github.io/en/rss.xml" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Fri, 30 Dec 2016 10:01:43 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Setting up a git server</title><link>https://derSuessmann.github.io/en/posts/eigenen-git-server-einrichten/</link><dc:creator>derSuessmann</dc:creator><description>&lt;p&gt;
I would like my students working on projects in teams. They will need a version control system for this.&lt;sup&gt;&lt;a id="fnr.1" name="fnr.1" class="footref" href="https://derSuessmann.github.io/en/posts/eigenen-git-server-einrichten/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Alternatives&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I have experimented a bit with &lt;a href="https://about.gitlab.com/"&gt;Gitlab&lt;/a&gt;, but it required to much effort setting up and keeping the server running stable. Rather by chance I found &lt;a href="https://gogs.io"&gt;Gogs - Go Git Server&lt;/a&gt;. There is a fork called &lt;a href="https://gitea.io"&gt;Gitea - Git with a cup of tea&lt;/a&gt;. I preferred Gitea, because the development of Gogs froze in the past several times. Gitea is supported by a larger team while Gogs has only two project members. Never the less the documentation of Gogs seems to be better structured and cleaner. The difference between the two project seem to be marginal at the moment.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Setting up a Ubuntu Server 16.04 LTS&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
It is possible to install Gitea on a Ubuntu server. I prepared the basic Ubuntu server with an OpenSSH server with the following steps. It is at your own descretion wether to run the server natively or on a virtual machine. You may even run Gogs or Gitea as a Docker container. This is also quite easy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;Setting up a virtual machine with Ubuntu Server 16.04 LTS&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Most of the time I run my servers as &lt;a href="http://www.linux-kvm.org/"&gt;KVM - Kernel based Virtual Machines&lt;/a&gt;. Creating the virtual machine is just a breeze with the following command.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virt-install --connect qemu:///system &lt;span class="se"&gt;\&lt;/span&gt;
  --name gitserver &lt;span class="se"&gt;\&lt;/span&gt;
  --ram &lt;span class="m"&gt;1024&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  --disk &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/lib/libvirt/images/gitserver.qcow2,size&lt;span class="o"&gt;=&lt;/span&gt;100,format&lt;span class="o"&gt;=&lt;/span&gt;qcow2 &lt;span class="se"&gt;\&lt;/span&gt;
  --vcpus &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  --network &lt;span class="nv"&gt;bridge&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;br0 &lt;span class="se"&gt;\&lt;/span&gt;
  --graphics none &lt;span class="se"&gt;\&lt;/span&gt;
  --console pty,target_type&lt;span class="o"&gt;=&lt;/span&gt;serial &lt;span class="se"&gt;\&lt;/span&gt;
  --location &lt;span class="s1"&gt;'http://archive.ubuntu.com/ubuntu/dists/xenial/main/installer-amd64/'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  --extra-args &lt;span class="s1"&gt;'console=ttyS0,115200n8 serial'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
You may use also Xen, VirtualBox, VMware or any other virtualisation environment.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;Installing git and creating the user &lt;code&gt;git&lt;/code&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
We will need &lt;code&gt;git&lt;/code&gt; on our server for sure. This has to be installed. It would be possible running version control with the server now, but it sure lacks the comfort anyone expects in the times of Github.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install git
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The Gitea server should run as a normal user with no special privileges. The following command will create the user &lt;code&gt;git&lt;/code&gt; for this.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo adduser git
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;Installing MariaDB and creating a database&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
Gitea as well as Gogs needs a database. The options are MySQL (MariaDB), PostgreSQL, SQLite3, MSSQL und TiDB. There is no recommendation to be found in the documentation of both projects. Finally, I decided to use MySQL (MariaDB) just because I have some experience with MySQL. The following command will install it on the Ubuntu server.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install mariadb-server
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The database setup just needs two SQL statements for creating the database and granting the user git full access.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;DATABASE&lt;/span&gt; &lt;span class="k"&gt;IF&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="n"&gt;gitea&lt;/span&gt; &lt;span class="nb"&gt;CHARACTER&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;utf8&lt;/span&gt; &lt;span class="k"&gt;COLLATE&lt;/span&gt; &lt;span class="n"&gt;utf8_general_ci&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;GRANT&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;gitea&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="s1"&gt;'git'&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="s1"&gt;'localhost'&lt;/span&gt; &lt;span class="n"&gt;identified&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;password&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Writing these statement into the file &lt;code&gt;create_gitea.sql&lt;/code&gt; allows us setting up the database with the following command.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mysql -uroot &amp;lt; create_gitea.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-6" class="outline-2"&gt;
&lt;h2 id="sec-6"&gt;Installing and configuring Gitea&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;p&gt;
You may start the Gitea installation and configuration after these preparations. The installation from a binary file seems the easiest to me. You only have to download the file as the user &lt;code&gt;git&lt;/code&gt; into a suitable directory and run it:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;su git
&lt;span class="nb"&gt;cd&lt;/span&gt; ~
mkdir gitea
&lt;span class="nb"&gt;cd&lt;/span&gt; gitea
wget -O gitea https://dl.gitea.io/gitea/1.0.0/gitea-1.0.0-linux-amd64
chmod +x gitea
./gitea web
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now the Gitea server is running and you may configure it.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-6-1" class="outline-3"&gt;
&lt;h3 id="sec-6-1"&gt;Configuring&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-6-1"&gt;
&lt;p&gt;
You configure Gitea in the web browser at the address shown at the console (e.g. &lt;a href="http://git:3000/"&gt;http://git:3000/&lt;/a&gt;).
&lt;/p&gt;


&lt;div id="fig:INSTALL-1" class="figure"&gt;
&lt;p&gt;&lt;img src="https://derSuessmann.github.io/en/posts/eigenen-git-server-einrichten/gitea_install_1.png" alt="gitea_install_1.png"&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 1:&lt;/span&gt; Configuring first part&lt;/p&gt;
&lt;/div&gt;


&lt;div id="fig:INSTALL-2" class="figure"&gt;
&lt;p&gt;&lt;img src="https://derSuessmann.github.io/en/posts/eigenen-git-server-einrichten/gitea_install_2.png" alt="gitea_install_2.png"&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 2:&lt;/span&gt; Configuring second part&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
I do not need a mail server at the moment, so I decided not to configure it for now (see figure &lt;a href="https://derSuessmann.github.io/en/posts/eigenen-git-server-einrichten/#fig:INSTALL-3"&gt;3&lt;/a&gt;), but I do not want self registration and would like only signed in users to view the pages
&lt;/p&gt;

&lt;div id="fig:INSTALL-3" class="figure"&gt;
&lt;p&gt;&lt;img src="https://derSuessmann.github.io/en/posts/eigenen-git-server-einrichten/gitea_install_3.png" alt="gitea_install_3.png"&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 3:&lt;/span&gt; Configring third part&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-6-2" class="outline-3"&gt;
&lt;h3 id="sec-6-2"&gt;Using user accounts from Active Directory&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-6-2"&gt;
&lt;p&gt;
The students have already an account at school. An additional authentication method must be added to allow the students to log in with their standard credentials.
&lt;/p&gt;

&lt;div id="fig:AD-1" class="figure"&gt;
&lt;p&gt;&lt;img src="https://derSuessmann.github.io/en/posts/eigenen-git-server-einrichten/gitea_active_directory_1.png" alt="gitea_active_directory_1.png"&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 4:&lt;/span&gt; Adding LDAP (AD) authentication&lt;/p&gt;
&lt;/div&gt;


&lt;div id="fig:AD-2" class="figure"&gt;
&lt;p&gt;&lt;img src="https://derSuessmann.github.io/en/posts/eigenen-git-server-einrichten/gitea_active_directory_2.png" alt="gitea_active_directory_2.png"&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 5:&lt;/span&gt; Configuring LDAP (AD)&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
The Gitea is now completely set up. We stop the running process with CTRL-C and log out as user &lt;code&gt;git&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-7" class="outline-2"&gt;
&lt;h2 id="sec-7"&gt;Systemd&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-7"&gt;
&lt;p&gt;
You have to tell Systemd to start the Gite server on system startup. This is done by creating the file &lt;code&gt;/lib/systemd/system/gitea.service&lt;/code&gt; with the following content.
&lt;/p&gt;
&lt;pre class="example"&gt;
[Unit]
Description=Gitea (Git with a cup of tea)
After=syslog.target
After=network.target
After=mysqld.service
#After=postgresql.service
#After=memcached.service
#After=redis.service

[Service]
# Modify these two values and uncomment them if you have
# repos with lots of files and get an HTTP error 500 because
# of that
###
#LimitMEMLOCK=infinity
#LimitNOFILE=65535
Type=simple
User=git
Group=git
WorkingDirectory=/home/git/gitea
ExecStart=/home/git/gitea/gitea web
Restart=always
Environment=USER=git HOME=/home/git

[Install]
WantedBy=multi-user.target
&lt;/pre&gt;

&lt;p&gt;
… and enabling and starting the service with Systemd.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; gitea.service
sudo systemctl start gitea.service
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Our Gitea server is now available.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" name="fn.1" class="footnum" href="https://derSuessmann.github.io/en/posts/eigenen-git-server-einrichten/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p&gt;The students could simply use Github repositories, but that is a no go. Every student would have to create a Github account. That is not acceptable. Furthermore, teaching and learning always needs a protected environment.&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description><category>administration</category><category>git</category><category>github</category><category>server</category><guid>https://derSuessmann.github.io/en/posts/eigenen-git-server-einrichten/</guid><pubDate>Thu, 29 Dec 2016 13:10:17 GMT</pubDate></item><item><title>Physics with Nikola</title><link>https://derSuessmann.github.io/en/posts/physics-with-nikola/</link><dc:creator>derSuessmann</dc:creator><description>&lt;p&gt;
I would like to use LaTeX notation in physics texts. Thankfully, there is MathJax. MathJax renders LaTeX formulas in HTML documents for quite some time.
&lt;/p&gt;

&lt;p&gt;
A simple mathematical formula:
&lt;/p&gt;

&lt;p&gt;
\( a^2 + b^2 = c^2 \)
&lt;/p&gt;

&lt;p&gt;
But physics require the rendering of a value with a unit. I use the siunitx package in LaTeX for this. These commands where not available in MathJax for a long time. There is a MathJax extension available since one year. This extension provides some of the functionality of the LaTeX package. Especially, the &lt;code&gt;\sisetup&lt;/code&gt; command is not working. The format of the output is not customizable as in LaTeX.
&lt;/p&gt;

\begin{equation}
\Delta s = \SI{4.5e-2}{\meter}
\end{equation}</description><guid>https://derSuessmann.github.io/en/posts/physics-with-nikola/</guid><pubDate>Thu, 07 Jul 2016 04:09:32 GMT</pubDate></item><item><title>Zertifikate von Let's Encrypt verwenden</title><link>https://derSuessmann.github.io/en/posts/zertifikate-von-lets-encrypt-verwenden/</link><dc:creator>derSuessmann</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Installing acme-tiny&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
My favorite Let's Encrypt clients is &lt;a href="https://github.com/diafygi/acme-tiny"&gt;acme-tiny&lt;/a&gt;. It is just a very short Python script, which makes a code review easy. Som preparations must be done with OpenSSL. &lt;code&gt;acme-tiny&lt;/code&gt; does not require root privileges. It just works. The user &lt;code&gt;lets&lt;/code&gt; has to exist on an OpenBSD system with an nginx web server for the following description.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;Creating the directoy structure&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
Create the following directories in the home directory of &lt;code&gt;lets&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir bin
mkdir src
mkdir reqs
mkdir certs
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;Cloning the repository&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
There may be updates of the script in the future. To facilitate this we are cloning the Github repository into the &lt;code&gt;src&lt;/code&gt; directory.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; src
git clone https://github.com/diafygi/acme-tiny.git
&lt;span class="nb"&gt;cd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now you should always review the source code of the script. If the code review is showing no issue, we are copying the script into the &lt;code&gt;bin&lt;/code&gt; directory. 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp src/acme-tiny/acme_tiny.py bin
chmod +x bin/acme_tiny.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-3" class="outline-3"&gt;
&lt;h3 id="sec-1-3"&gt;Creating a private key for the Let's Encrypt account&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;p&gt;
You will need a key pair for the account. The following command will generate a private and a public key for your account. The private key should only be readable by the user &lt;code&gt;lets&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl genrsa &lt;span class="m"&gt;4096&lt;/span&gt; &amp;gt; account.key
chmod &lt;span class="m"&gt;400&lt;/span&gt; account.key
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-4" class="outline-3"&gt;
&lt;h3 id="sec-1-4"&gt;Creating a certificate signing request (CSR)&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-4"&gt;
&lt;p&gt;
You must create a a domain key pair and certificate signing request for each domain. The certificate signing request contains the public key for the domain. It will be send to Let's Encrypt for signing.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl genrsa &lt;span class="m"&gt;4096&lt;/span&gt; &amp;gt; example.key
openssl req -new -sha256 -key example.key -subj &lt;span class="s2"&gt;"/CN=example.com"&lt;/span&gt; &amp;gt; ./requests/example.csr
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Only the server process will require the private key from now on. I move it as user &lt;code&gt;root&lt;/code&gt; (sudo/doas) into the &lt;code&gt;/etc/ssl/private&lt;/code&gt; directory, where only &lt;code&gt;root&lt;/code&gt; can access it.
&lt;/p&gt;

&lt;p&gt;
It is also possible to request one certificate for several domains, but I do not use this at the moment.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-5" class="outline-3"&gt;
&lt;h3 id="sec-1-5"&gt;Configuring the challenges directory&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-5"&gt;
&lt;p&gt;
Let's Encrypt must verify the you have control over the requested domain. This is done by checking a special file that the acme-tiny client puts on the web server at &lt;a href="http://domain/.well-known/acme-challenge/..."&gt;http://domain/.well-known/acme-challenge/...&lt;/a&gt;.
&lt;/p&gt;

&lt;pre class="example"&gt;
server {
    listen 80;
    server_name example.com;

    location /.well-known/acme-challenge/ {
        alias /var/www/challenges/;
        try_files $uri =404;
    }

    ...
}
&lt;/pre&gt;

&lt;p&gt;
This step kept me for quite some time. The reverse proxy did search in the wrong directory, but the configuration seemed to be quite in order. I had to restructure my nginx configuration files. Now it is working like a charm. The lesson learned is: Do not overoptimize configuration files.
&lt;/p&gt;

&lt;p&gt;
Now we have completed the preparations for the certificate requests.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-6" class="outline-3"&gt;
&lt;h3 id="sec-1-6"&gt;Requesting a certificate&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-6"&gt;
&lt;p&gt;
The following command request the certificate for the example domain.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python acme_tiny.py --account-key ./account.key --csr ~/requests/example.csr --acme-dir /var/www/challenges/ &amp;gt; ~/certs/example.crt
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Normally a server requires a certificate chain. The certificate chain is a file with the concatenation of the domain and the intermediate and root certificate of the certification authority. The following steps create this file.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -fsS https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem -o ~/certs/intermediate.pem
cat ~/certs/example.crt intermediate.pem &amp;gt; /etc/ssl/lets/example-chained.pem
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This shows the trick to separate the privileges. The domain's private key (&lt;code&gt;example.key&lt;/code&gt;), which is only required during creation of the certificate request and aftewards by the server, is stored in a directory only accessible by &lt;code&gt;root&lt;/code&gt;. The directory with the certificates (&lt;code&gt;/etc/ssl/lets/&lt;/code&gt;) is owned by &lt;code&gt;lets&lt;/code&gt; who has only normal user privileges. Everybody has readonly access.  
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-7" class="outline-3"&gt;
&lt;h3 id="sec-1-7"&gt;Certificate renewal&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-7"&gt;
&lt;p&gt;
Since the certificate is only valid for 90 days, you must request a new one before expiration. You may use the same call of &lt;code&gt;acme-tiny.py&lt;/code&gt; like shown above. Since we are running OpenBSD it is advisable to write a script and run it using &lt;code&gt;cron&lt;/code&gt;.
The following script works with OpenBSD for other unix like operating systems you have to adapt the script. Let's call it &lt;code&gt;renew_cert.sh&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="c1"&gt;# Renew certificates with Let's Encrypt&lt;/span&gt;

&lt;span class="nv"&gt;base&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/home/lets"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;acme_tiny&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$base&lt;/span&gt;&lt;span class="s2"&gt;/bin/acme_tiny.py"&lt;/span&gt;
&lt;span class="nv"&gt;chaineddir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/etc/ssl/acme"&lt;/span&gt;

&lt;span class="nv"&gt;accountkey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$base&lt;/span&gt;&lt;span class="s2"&gt;/account.key"&lt;/span&gt;
&lt;span class="nv"&gt;reqsdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$base&lt;/span&gt;&lt;span class="s2"&gt;/reqs"&lt;/span&gt;
&lt;span class="nv"&gt;certsdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$base&lt;/span&gt;&lt;span class="s2"&gt;/certs"&lt;/span&gt;
&lt;span class="nv"&gt;challengedir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/var/www/challenges"&lt;/span&gt;
&lt;span class="nv"&gt;intermediate_cert&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$certsdir&lt;/span&gt;&lt;span class="s2"&gt;/intermediate.pem"&lt;/span&gt;
&lt;span class="nv"&gt;intermediate_cert_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem"&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Downloading intermediate certificate..."&lt;/span&gt;
&lt;span class="c1"&gt;# get intermediate certificate with curl&lt;/span&gt;
&lt;span class="c1"&gt;# -f: fail without writing html garbage to output file&lt;/span&gt;
&lt;span class="c1"&gt;# -s: silent mode without progress meter&lt;/span&gt;
&lt;span class="c1"&gt;# -S: output error message if download fails&lt;/span&gt;
curl -fsS &lt;span class="nv"&gt;$intermediate_cert_url&lt;/span&gt; -o &lt;span class="nv"&gt;$intermediate_cert&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Success."&lt;/span&gt;

&lt;span class="c1"&gt;# The script continues even if the download of the intermediate&lt;/span&gt;
&lt;span class="c1"&gt;# certificate fails. The old intermediate certificate should still&lt;/span&gt;
&lt;span class="c1"&gt;# exist and be useable.&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; csr in &lt;span class="nv"&gt;$reqsdir&lt;/span&gt;/*.csr&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;basename &lt;span class="nv"&gt;$csr&lt;/span&gt; .csr&lt;span class="sb"&gt;`&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Requesting certificate for &lt;/span&gt;&lt;span class="nv"&gt;$domain&lt;/span&gt;&lt;span class="s2"&gt;..."&lt;/span&gt;
  acme_tiny --account-key &lt;span class="nv"&gt;$accountkey&lt;/span&gt; --csr &lt;span class="nv"&gt;$csr&lt;/span&gt; --acme-dir &lt;span class="nv"&gt;$challengedir&lt;/span&gt; &amp;gt; &lt;span class="nv"&gt;$certsdir&lt;/span&gt;/&lt;span class="nv"&gt;$domain&lt;/span&gt;.crt &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Failed!"&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Success."&lt;/span&gt;
  cat &lt;span class="nv"&gt;$certsdir&lt;/span&gt;/&lt;span class="nv"&gt;$domain&lt;/span&gt;.crt &lt;span class="nv"&gt;$intermediate_cert&lt;/span&gt; &amp;gt;&lt;span class="nv"&gt;$chaineddir&lt;/span&gt;/&lt;span class="nv"&gt;$domain&lt;/span&gt;-chained.pem
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Reloading web server configuration..."&lt;/span&gt;
doas /usr/sbin/rcctl reload nginx &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Failed!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Success."&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
After renewal the web server must load its configurtion again. The user &lt;code&gt;lets&lt;/code&gt; should do this after renewing the certificate, but he needs the privileges for this. The can be done with a simple line in the &lt;code&gt;doas&lt;/code&gt; configuration file &lt;code&gt;/etc/doas.conf&lt;/code&gt;. The user &lt;code&gt;lets&lt;/code&gt; may now reload and only reload the web server configuration. For other operating systems you may achieve similar effects with the sudo configuration.
&lt;/p&gt;

&lt;pre class="example"&gt;
permit nopass lets as root cmd /usr/sbin/rcctl args reload nginx
&lt;/pre&gt;

&lt;p&gt;
&lt;code&gt;cron&lt;/code&gt; will now request a new certificate each month with the following &lt;code&gt;crontab&lt;/code&gt;. I like it when I receive mail from my script each time it runs.
&lt;/p&gt;

&lt;pre class="example"&gt;
MAILTO=cert@example.com
0 0 1 * * $HOME/bin/renew_certs.sh
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>administration</category><category>certificate</category><category>python</category><category>security</category><category>tls</category><guid>https://derSuessmann.github.io/en/posts/zertifikate-von-lets-encrypt-verwenden/</guid><pubDate>Wed, 06 Jul 2016 15:16:50 GMT</pubDate></item></channel></rss>