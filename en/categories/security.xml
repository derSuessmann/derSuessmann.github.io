<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>derSuessmann (Posts about security)</title><link>https://derSuessmann.github.io/</link><description></description><atom:link href="https://derSuessmann.github.io/en/categories/security.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 30 Jan 2017 19:10:34 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Zertifikate von Let's Encrypt verwenden</title><link>https://derSuessmann.github.io/en/posts/zertifikate-von-lets-encrypt-verwenden/</link><dc:creator>derSuessmann</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Installing acme-tiny&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
My favorite Let's Encrypt clients is &lt;a href="https://github.com/diafygi/acme-tiny"&gt;acme-tiny&lt;/a&gt;. It is just a very short Python script, which makes a code review easy. Som preparations must be done with OpenSSL. &lt;code&gt;acme-tiny&lt;/code&gt; does not require root privileges. It just works. The user &lt;code&gt;lets&lt;/code&gt; has to exist on an OpenBSD system with an nginx web server for the following description.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;Creating the directoy structure&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
Create the following directories in the home directory of &lt;code&gt;lets&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir bin
mkdir src
mkdir reqs
mkdir certs
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;Cloning the repository&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
There may be updates of the script in the future. To facilitate this we are cloning the Github repository into the &lt;code&gt;src&lt;/code&gt; directory.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; src
git clone https://github.com/diafygi/acme-tiny.git
&lt;span class="nb"&gt;cd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now you should always review the source code of the script. If the code review is showing no issue, we are copying the script into the &lt;code&gt;bin&lt;/code&gt; directory. 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp src/acme-tiny/acme_tiny.py bin
chmod +x bin/acme_tiny.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-3" class="outline-3"&gt;
&lt;h3 id="sec-1-3"&gt;Creating a private key for the Let's Encrypt account&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;p&gt;
You will need a key pair for the account. The following command will generate a private and a public key for your account. The private key should only be readable by the user &lt;code&gt;lets&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl genrsa &lt;span class="m"&gt;4096&lt;/span&gt; &amp;gt; account.key
chmod &lt;span class="m"&gt;400&lt;/span&gt; account.key
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-4" class="outline-3"&gt;
&lt;h3 id="sec-1-4"&gt;Creating a certificate signing request (CSR)&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-4"&gt;
&lt;p&gt;
You must create a a domain key pair and certificate signing request for each domain. The certificate signing request contains the public key for the domain. It will be send to Let's Encrypt for signing.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl genrsa &lt;span class="m"&gt;4096&lt;/span&gt; &amp;gt; example.key
openssl req -new -sha256 -key example.key -subj &lt;span class="s2"&gt;"/CN=example.com"&lt;/span&gt; &amp;gt; ./requests/example.csr
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Only the server process will require the private key from now on. I move it as user &lt;code&gt;root&lt;/code&gt; (sudo/doas) into the &lt;code&gt;/etc/ssl/private&lt;/code&gt; directory, where only &lt;code&gt;root&lt;/code&gt; can access it.
&lt;/p&gt;

&lt;p&gt;
It is also possible to request one certificate for several domains, but I do not use this at the moment.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-5" class="outline-3"&gt;
&lt;h3 id="sec-1-5"&gt;Configuring the challenges directory&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-5"&gt;
&lt;p&gt;
Let's Encrypt must verify the you have control over the requested domain. This is done by checking a special file that the acme-tiny client puts on the web server at &lt;a href="http://domain/.well-known/acme-challenge/..."&gt;http://domain/.well-known/acme-challenge/...&lt;/a&gt;.
&lt;/p&gt;

&lt;pre class="example"&gt;
server {
    listen 80;
    server_name example.com;

    location /.well-known/acme-challenge/ {
        alias /var/www/challenges/;
        try_files $uri =404;
    }

    ...
}
&lt;/pre&gt;

&lt;p&gt;
This step kept me for quite some time. The reverse proxy did search in the wrong directory, but the configuration seemed to be quite in order. I had to restructure my nginx configuration files. Now it is working like a charm. The lesson learned is: Do not overoptimize configuration files.
&lt;/p&gt;

&lt;p&gt;
Now we have completed the preparations for the certificate requests.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-6" class="outline-3"&gt;
&lt;h3 id="sec-1-6"&gt;Requesting a certificate&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-6"&gt;
&lt;p&gt;
The following command request the certificate for the example domain.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python acme_tiny.py --account-key ./account.key --csr ~/requests/example.csr --acme-dir /var/www/challenges/ &amp;gt; ~/certs/example.crt
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Normally a server requires a certificate chain. The certificate chain is a file with the concatenation of the domain and the intermediate and root certificate of the certification authority. The following steps create this file.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -fsS https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem -o ~/certs/intermediate.pem
cat ~/certs/example.crt intermediate.pem &amp;gt; /etc/ssl/lets/example-chained.pem
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This shows the trick to separate the privileges. The domain's private key (&lt;code&gt;example.key&lt;/code&gt;), which is only required during creation of the certificate request and aftewards by the server, is stored in a directory only accessible by &lt;code&gt;root&lt;/code&gt;. The directory with the certificates (&lt;code&gt;/etc/ssl/lets/&lt;/code&gt;) is owned by &lt;code&gt;lets&lt;/code&gt; who has only normal user privileges. Everybody has readonly access.  
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-7" class="outline-3"&gt;
&lt;h3 id="sec-1-7"&gt;Certificate renewal&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-7"&gt;
&lt;p&gt;
Since the certificate is only valid for 90 days, you must request a new one before expiration. You may use the same call of &lt;code&gt;acme-tiny.py&lt;/code&gt; like shown above. Since we are running OpenBSD it is advisable to write a script and run it using &lt;code&gt;cron&lt;/code&gt;.
The following script works with OpenBSD for other unix like operating systems you have to adapt the script. Let's call it &lt;code&gt;renew_cert.sh&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="c1"&gt;# Renew certificates with Let's Encrypt&lt;/span&gt;

&lt;span class="nv"&gt;base&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/home/lets"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;acme_tiny&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$base&lt;/span&gt;&lt;span class="s2"&gt;/bin/acme_tiny.py"&lt;/span&gt;
&lt;span class="nv"&gt;chaineddir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/etc/ssl/acme"&lt;/span&gt;

&lt;span class="nv"&gt;accountkey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$base&lt;/span&gt;&lt;span class="s2"&gt;/account.key"&lt;/span&gt;
&lt;span class="nv"&gt;reqsdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$base&lt;/span&gt;&lt;span class="s2"&gt;/reqs"&lt;/span&gt;
&lt;span class="nv"&gt;certsdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$base&lt;/span&gt;&lt;span class="s2"&gt;/certs"&lt;/span&gt;
&lt;span class="nv"&gt;challengedir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/var/www/challenges"&lt;/span&gt;
&lt;span class="nv"&gt;intermediate_cert&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$certsdir&lt;/span&gt;&lt;span class="s2"&gt;/intermediate.pem"&lt;/span&gt;
&lt;span class="nv"&gt;intermediate_cert_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem"&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Downloading intermediate certificate..."&lt;/span&gt;
&lt;span class="c1"&gt;# get intermediate certificate with curl&lt;/span&gt;
&lt;span class="c1"&gt;# -f: fail without writing html garbage to output file&lt;/span&gt;
&lt;span class="c1"&gt;# -s: silent mode without progress meter&lt;/span&gt;
&lt;span class="c1"&gt;# -S: output error message if download fails&lt;/span&gt;
curl -fsS &lt;span class="nv"&gt;$intermediate_cert_url&lt;/span&gt; -o &lt;span class="nv"&gt;$intermediate_cert&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Success."&lt;/span&gt;

&lt;span class="c1"&gt;# The script continues even if the download of the intermediate&lt;/span&gt;
&lt;span class="c1"&gt;# certificate fails. The old intermediate certificate should still&lt;/span&gt;
&lt;span class="c1"&gt;# exist and be useable.&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; csr in &lt;span class="nv"&gt;$reqsdir&lt;/span&gt;/*.csr&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;basename &lt;span class="nv"&gt;$csr&lt;/span&gt; .csr&lt;span class="sb"&gt;`&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Requesting certificate for &lt;/span&gt;&lt;span class="nv"&gt;$domain&lt;/span&gt;&lt;span class="s2"&gt;..."&lt;/span&gt;
  acme_tiny --account-key &lt;span class="nv"&gt;$accountkey&lt;/span&gt; --csr &lt;span class="nv"&gt;$csr&lt;/span&gt; --acme-dir &lt;span class="nv"&gt;$challengedir&lt;/span&gt; &amp;gt; &lt;span class="nv"&gt;$certsdir&lt;/span&gt;/&lt;span class="nv"&gt;$domain&lt;/span&gt;.crt &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Failed!"&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Success."&lt;/span&gt;
  cat &lt;span class="nv"&gt;$certsdir&lt;/span&gt;/&lt;span class="nv"&gt;$domain&lt;/span&gt;.crt &lt;span class="nv"&gt;$intermediate_cert&lt;/span&gt; &amp;gt;&lt;span class="nv"&gt;$chaineddir&lt;/span&gt;/&lt;span class="nv"&gt;$domain&lt;/span&gt;-chained.pem
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Reloading web server configuration..."&lt;/span&gt;
doas /usr/sbin/rcctl reload nginx &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Failed!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Success."&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
After renewal the web server must load its configurtion again. The user &lt;code&gt;lets&lt;/code&gt; should do this after renewing the certificate, but he needs the privileges for this. The can be done with a simple line in the &lt;code&gt;doas&lt;/code&gt; configuration file &lt;code&gt;/etc/doas.conf&lt;/code&gt;. The user &lt;code&gt;lets&lt;/code&gt; may now reload and only reload the web server configuration. For other operating systems you may achieve similar effects with the sudo configuration.
&lt;/p&gt;

&lt;pre class="example"&gt;
permit nopass lets as root cmd /usr/sbin/rcctl args reload nginx
&lt;/pre&gt;

&lt;p&gt;
&lt;code&gt;cron&lt;/code&gt; will now request a new certificate each month with the following &lt;code&gt;crontab&lt;/code&gt;. I like it when I receive mail from my script each time it runs.
&lt;/p&gt;

&lt;pre class="example"&gt;
MAILTO=cert@example.com
0 0 1 * * $HOME/bin/renew_certs.sh
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>administration</category><category>certificate</category><category>python</category><category>security</category><category>tls</category><guid>https://derSuessmann.github.io/en/posts/zertifikate-von-lets-encrypt-verwenden/</guid><pubDate>Wed, 06 Jul 2016 15:16:50 GMT</pubDate></item></channel></rss>