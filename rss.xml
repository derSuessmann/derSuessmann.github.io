<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>derSuessmann</title><link>https://derSuessmann.github.io/</link><description>Hier ist alles beta...</description><atom:link rel="self" href="https://derSuessmann.github.io/rss.xml" type="application/rss+xml"></atom:link><language>de</language><lastBuildDate>Thu, 29 Dec 2016 15:25:05 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Eigenen Git-Server einrichten</title><link>https://derSuessmann.github.io/posts/eigenen-git-server-einrichten/</link><dc:creator>derSuessmann</dc:creator><description>&lt;p&gt;
Im Unterricht möchte ich die Schülerinnen und Schüler an einem gemeinsamen Projekt arbeiten lassen. Dazu benötigen sie eine Versionsverwaltung. &lt;sup&gt;&lt;a id="fnr.1" name="fnr.1" class="footref" href="https://derSuessmann.github.io/posts/eigenen-git-server-einrichten/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Alternativen&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
In der Vergangenheit habe ich deshalb mit &lt;a href="https://about.gitlab.com/"&gt;Gitlab&lt;/a&gt; herum experimentiert. Es war aber zu aufwendig, den Server stabil zu betreiben. Mehr oder weniger zufällig bin ich auf &lt;a href="https://gogs.io"&gt;Gogs - Go Git Server gestoßen&lt;/a&gt;. Es gibt einen Fork des Projekts namens &lt;a href="https://gitea.io"&gt;Gitea - Git with a cup of tea&lt;/a&gt;. Ich habe Gitea den Vorzug gegeben, da die Entwicklung von Gogs in der Vergangenheit eingeschlafen war. Gitea hat eine Menge Mitarbeiter, Gogs nur zwei. Allerdings sieht die Dokumentation von Gogs aufgeräumter aus. Momentan scheint der Unterschied zwischen Gogs und Gitea minimal zu sein.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Ubuntu Server 16.04 LTS bereitstellen&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Den Gitea-Server kann man natürlich auf einem Ubuntu-Server installieren. Dazu habe ich die folgenden Schritte nach der Grundinstallation des Ubuntu-Servers mit dem OpenSSH-Server durchgeführt. Ob man den Server nativ oder virtualisiert betreibt bleibt dem eigenen Geschmack überlassen. Man kann Gogs und Gitea auch in einem Docker-Container betreiben. Die Installation ist dann ebenfalls super einfach.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h3 id="sec-2-1"&gt;Virtuelle Maschine mit Ubuntu Server 16.04 LTS aufsetzen&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
Meistens betreibe ich meine Server als &lt;a href="http://www.linux-kvm.org/"&gt;KVM - Kernel based Virtual Machines&lt;/a&gt;. Die virtuelle Maschine ist dann schnell mit der folgenden Anweisung aufgesetzt.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virt-install --connect qemu:///system &lt;span class="se"&gt;\&lt;/span&gt;
  --name gitserver &lt;span class="se"&gt;\&lt;/span&gt;
  --ram &lt;span class="m"&gt;1024&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  --disk &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/lib/libvirt/images/gitserver.qcow2,size&lt;span class="o"&gt;=&lt;/span&gt;100,format&lt;span class="o"&gt;=&lt;/span&gt;qcow2 &lt;span class="se"&gt;\&lt;/span&gt;
  --vcpus &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  --network &lt;span class="nv"&gt;bridge&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;br0 &lt;span class="se"&gt;\&lt;/span&gt;
  --graphics none &lt;span class="se"&gt;\&lt;/span&gt;
  --console pty,target_type&lt;span class="o"&gt;=&lt;/span&gt;serial &lt;span class="se"&gt;\&lt;/span&gt;
  --location &lt;span class="s1"&gt;'http://archive.ubuntu.com/ubuntu/dists/xenial/main/installer-amd64/'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  --extra-args &lt;span class="s1"&gt;'console=ttyS0,115200n8 serial'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Natürlich kann man auch Xen, VirtualBox, VMware oder sonst eine Virtualisierungslösung verwenden.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-2" class="outline-3"&gt;
&lt;h3 id="sec-2-2"&gt;Git installieren und Benutzer &lt;code&gt;git&lt;/code&gt; anlegen&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;p&gt;
Auf unserem Git-Server benötigen wir natürlich &lt;code&gt;git&lt;/code&gt;. Das muss noch installiert werden. Damit könnte man schon seine Versionsverwaltung auf dem Server betreiben. Das bietet aber keinerlei Komfort.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install git
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Der Gitea-Server soll unter dem (normalen) Benutzer &lt;code&gt;git&lt;/code&gt; laufen. Den muss man mit dem folgenden Kommando noch anlegen.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo adduser git
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-3" class="outline-3"&gt;
&lt;h3 id="sec-2-3"&gt;MariaDB installieren und Datenbank anlegen&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-3"&gt;
&lt;p&gt;
Gogs und Gitea benötigen eine Datenbank. Sie können dabei MySQL (MariaDB), PostgreSQL, SQLite3, MSSQL und TiDB verwenden. Eine Empfehlung habe ich nicht gefunden. Da ich mit MySQL gut vertraut bin, habe ich mich für MySQL (MariaDB) entschieden und mit der folgenden Anweisung auf dem Server installiert.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install mariadb-server
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Mit den beiden folgenden SQL-Anweisungen wird die Datenbank für Gitea eingerichtet und dem Benutzer &lt;code&gt;git&lt;/code&gt; die vollen Rechte auf der Datenbank gegeben.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;DATABASE&lt;/span&gt; &lt;span class="k"&gt;IF&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="n"&gt;gitea&lt;/span&gt; &lt;span class="nb"&gt;CHARACTER&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;utf8&lt;/span&gt; &lt;span class="k"&gt;COLLATE&lt;/span&gt; &lt;span class="n"&gt;utf8_general_ci&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;GRANT&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;gitea&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="s1"&gt;'git'&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="s1"&gt;'localhost'&lt;/span&gt; &lt;span class="n"&gt;identified&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;Passwort&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Schreibt man die SQL-Anweisungen von oben in die &lt;code&gt;create_gitea.sql&lt;/code&gt;, so kann man die Datenbank für Gitea mit dem folgenden Kommando einrichten.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mysql -uroot &amp;lt; create_gitea.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-4" class="outline-3"&gt;
&lt;h3 id="sec-2-4"&gt;Gitea installieren und konfigurieren&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-4"&gt;
&lt;p&gt;
Nach den Vorbereitungen kann man jetzt Gitea installieren und konfigurieren. Mir erschien die Installation als Binärdatei am einfachsten. Dazu braucht man als Benutzer &lt;code&gt;git&lt;/code&gt; nur die ausführbare Datei in ein passendes Verzeichnis herunterzuladen und zu starten:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;su git
&lt;span class="nb"&gt;cd&lt;/span&gt; ~
mkdir gitea
&lt;span class="nb"&gt;cd&lt;/span&gt; gitea
wget -O gitea https://dl.gitea.io/gitea/1.0.0/gitea-1.0.0-linux-amd64
chmod +x gitea
./gitea web
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Jetzt läuft der Gitea-Server und kann konfiguriert werden.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-4-1" class="outline-4"&gt;
&lt;h4 id="sec-2-4-1"&gt;Konfiguration&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-4-1"&gt;
&lt;p&gt;
Die Konfiguration erfolgt im Web-Browser unter der auf der Konsole angezeigten Adresse (bei mir &lt;a href="http://git:3000/"&gt;http://git:3000/&lt;/a&gt;).
&lt;/p&gt;


&lt;div id="fig:INSTALL-1" class="figure"&gt;
&lt;p&gt;&lt;img src="https://derSuessmann.github.io/posts/eigenen-git-server-einrichten/gitea_install_1.png" alt="gitea_install_1.png"&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 1:&lt;/span&gt; Konfiguration oberer Bereich&lt;/p&gt;
&lt;/div&gt;


&lt;div id="fig:INSTALL-2" class="figure"&gt;
&lt;p&gt;&lt;img src="https://derSuessmann.github.io/posts/eigenen-git-server-einrichten/gitea_install_2.png" alt="gitea_install_2.png"&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 2:&lt;/span&gt; Konfiguration mittlerer Bereich&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Den Mail-Server habe ich erst einmal nicht konfiguriert (siehe Abbildung &lt;a href="https://derSuessmann.github.io/posts/eigenen-git-server-einrichten/#fig:INSTALL-3"&gt;3&lt;/a&gt;).
&lt;/p&gt;

&lt;div id="fig:INSTALL-3" class="figure"&gt;
&lt;p&gt;&lt;img src="https://derSuessmann.github.io/posts/eigenen-git-server-einrichten/gitea_install_3.png" alt="gitea_install_3.png"&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 3:&lt;/span&gt; Konfiguration unterer Bereich&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Jetzt ist der Gitea-Server fertig konfiguriert.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-4-2" class="outline-4"&gt;
&lt;h4 id="sec-2-4-2"&gt;Benutzer aus Active Directory verwenden&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-4-2"&gt;
&lt;p&gt;
Die Schülerinnen und Schüler haben ein Konto im Schulnetzwerk. Damit diese Konten für die Anmeldung am Gitea-Server verwendet werden muss man noch die Authentikation mit dem Active Directory konfigurieren. 
&lt;/p&gt;

&lt;p&gt;
Also fügen wir einen Authentikator hinzu:
&lt;/p&gt;

&lt;div id="fig:AD-1" class="figure"&gt;
&lt;p&gt;&lt;img src="https://derSuessmann.github.io/posts/eigenen-git-server-einrichten/gitea_active_directory_1.png" alt="gitea_active_directory_1.png"&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 4:&lt;/span&gt; LDAP (AD) als Authentikator hinzufügen&lt;/p&gt;
&lt;/div&gt;


&lt;div id="fig:AD-2" class="figure"&gt;
&lt;p&gt;&lt;img src="https://derSuessmann.github.io/posts/eigenen-git-server-einrichten/gitea_active_directory_2.png" alt="gitea_active_directory_2.png"&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 5:&lt;/span&gt; LDAP (AD) konfigurieren&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Der Gitea-Server ist jetzt fertig konfiguriert. Wir beenden den laufenden Prozess mit CTRL-C und melden uns als Benutzer &lt;code&gt;git&lt;/code&gt; ab.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-5" class="outline-3"&gt;
&lt;h3 id="sec-2-5"&gt;Systemd&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-5"&gt;
&lt;p&gt;
Damit der Gitea-Server beim Starten der Server-Maschine auch gestartet wird muss man das dem Systemd mitteilen. Dazu legt man die Datei &lt;code&gt;/lib/systemd/system/gitea.service&lt;/code&gt; mit dem folgenden Inhalt an.
&lt;/p&gt;
&lt;pre class="example"&gt;
[Unit]
Description=Gitea (Git with a cup of tea)
After=syslog.target
After=network.target
After=mysqld.service
#After=postgresql.service
#After=memcached.service
#After=redis.service

[Service]
# Modify these two values and uncomment them if you have
# repos with lots of files and get an HTTP error 500 because
# of that
###
#LimitMEMLOCK=infinity
#LimitNOFILE=65535
Type=simple
User=git
Group=git
WorkingDirectory=/home/git/gitea
ExecStart=/home/git/gitea/gitea web
Restart=always
Environment=USER=git HOME=/home/git

[Install]
WantedBy=multi-user.target
&lt;/pre&gt;

&lt;p&gt;
Jetzt noch schnell den Service aktivieren und über Systemd starten.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; gitea.service
sudo systemctl start gitea.service
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Jetzt ist unser Gitea-Server fertig.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" name="fn.1" class="footnum" href="https://derSuessmann.github.io/posts/eigenen-git-server-einrichten/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p&gt;Einfach ein Projekt auf Github dafür einzurichten scheidet aus. Da ein eigenes Konto auf Github einrichten müsste. Unterricht soll aber in einer kontrollierten Umgebung stattfinden.&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description><category>administration</category><category>git</category><category>github</category><category>server</category><guid>https://derSuessmann.github.io/posts/eigenen-git-server-einrichten/</guid><pubDate>Thu, 29 Dec 2016 13:10:17 GMT</pubDate></item><item><title>Physik mit Nikola</title><link>https://derSuessmann.github.io/posts/physik-mit-nikola/</link><dc:creator>derSuessmann</dc:creator><description>&lt;p&gt;
Für Texte mit physikalischen Formeln möchte ich die LaTeX-Notation verwenden.
Dank MathJax funktioniert das auch schon lange recht gut.
&lt;/p&gt;

&lt;p&gt;
Einfache mathematische Formel:
&lt;/p&gt;

&lt;p&gt;
\( a^2 + b^2 = c^2 \)
&lt;/p&gt;

&lt;p&gt;
Um aber Ergebnisse
mit Wert und Einheit gut darzustellen, verwende ich das siunitx-Paket in LaTeX.
Lange waren die Kommandos in MathJax nicht verfügbar. Seit einem Jahr gibt es
eine MathJax-Erweiterung, die die Funktionalität des LaTeX-Pakets ansatzweise
nachbildet. Leider funktioniert der &lt;code&gt;\sisetup&lt;/code&gt;-Befehl nicht, so dass die
Darstellung recht amerikanisch aussieht.
&lt;/p&gt;

\begin{equation}
\Delta s = \SI{4.5e-2}{\meter}
\end{equation}</description><category>mathjax</category><guid>https://derSuessmann.github.io/posts/physik-mit-nikola/</guid><pubDate>Thu, 07 Jul 2016 04:09:32 GMT</pubDate></item><item><title>Zertifikate von Let's Encrypt verwenden</title><link>https://derSuessmann.github.io/posts/zertifikate-von-lets-encrypt-verwenden/</link><dc:creator>derSuessmann</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Installation von acme-tiny&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Mein Favorit der Let's Encrypt Clients ist &lt;a href="https://github.com/diafygi/acme-tiny"&gt;acme-tiny&lt;/a&gt;. Es ist ein sehr
kurzes Python-Skript. Das erleichtert einen Code-Review. Die
Vorarbeiten für die Zertifikatserstellung werden leicht mit OpenSSL
durchgeführt. Es benötigt keine root-Rechte und funktioniert gut. In
der folgenden Beschreibung gehen wir davon aus, dass der Benutzer
&lt;code&gt;lets&lt;/code&gt; als normaler Benutzer auf einem OpenBSD-System mit nginx als
Web-Server existiert.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;Erstellen der Verzeichnisstruktur&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
Im Verzeichnis des Benutzers &lt;code&gt;lets&lt;/code&gt; wird folgende Verzeichnisstruktur
angelegt.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir bin
mkdir src
mkdir reqs
mkdir certs
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;Clonen des Repositories&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
Damit man das Skript leicht installieren und eventuell auch
aktualisieren kann wird das Repository in &lt;code&gt;src&lt;/code&gt; geclont.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; src
git clone https://github.com/diafygi/acme-tiny.git
&lt;span class="nb"&gt;cd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Das Skript kopiert man nach dem Code Review nach &lt;code&gt;bin&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp src/acme-tiny/acme_tiny.py bin
chmod +x bin/acme_tiny.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-3" class="outline-3"&gt;
&lt;h3 id="sec-1-3"&gt;Erstellen des privaten Schlüssels für den Let's Encrypt Account&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;p&gt;
Für den Account benötigt man ein Schlüsselpaar. Das kann man leicht mit
dem folgenden Kommando erstellen. Aus Sicherheitsgründen sollte es auch
nur für den Benutzer lesbar sein.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl genrsa &lt;span class="m"&gt;4096&lt;/span&gt; &amp;gt; account.key
chmod &lt;span class="m"&gt;400&lt;/span&gt; account.key
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-4" class="outline-3"&gt;
&lt;h3 id="sec-1-4"&gt;Erstellen eines Certificate Signing Requests (CSR)&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-4"&gt;
&lt;p&gt;
Für jede Domain, für die Let's Encrypt ein Zertifikat ausstellen soll
benötigt man einen Certificate Signing Request. Im Certificate Signing
Request wird der öffentliche Schlüssel der Domain zum Unterschreiben an
Let's Encrypt gesandt. Also müssen wir am besten für jede Domain einen
eigenes Domain-Schlüsselpaar und einen Request erstellen.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl genrsa &lt;span class="m"&gt;4096&lt;/span&gt; &amp;gt; example.key
openssl req -new -sha256 -key example.key -subj &lt;span class="s2"&gt;"/CN=example.com"&lt;/span&gt; &amp;gt; ./requests/example.csr
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Jetzt wird der Schlüssel nur noch vom Server benötigt. Ich habe ihn als
&lt;code&gt;root&lt;/code&gt; (sudo/doas) in das Verzeichnis &lt;code&gt;/etc/ssl/private&lt;/code&gt; verschoben.
&lt;/p&gt;

&lt;p&gt;
Man kann auch ein Zertifikat für mehrere Domains in einem Zertifikat
erstellen lassen. Das nutze ich zur Zeit aber nicht.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-5" class="outline-3"&gt;
&lt;h3 id="sec-1-5"&gt;Konfiguration des Verzeichnisses für die Challenges&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-5"&gt;
&lt;p&gt;
Let's Encrypt verifiziert mit einer Challenge, dass man die Kontrolle
über die Domain für das Zertifikat hat. Dazu muss der Client eine Datei
anlegen können, die der Let's Encrypt Server unter der Adresse
&lt;a href="http://domain/.well-known/acme-challenge/..."&gt;http://domain/.well-known/acme-challenge/...&lt;/a&gt;
abrufen kann. Dazu muss der Web-Server ein entsprechendes Verzeichnis
haben.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;server_name&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;well&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;known&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;acme&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;challenge&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
	&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;challenges&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
	&lt;span class="n"&gt;try_files&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Dieser Schritt hat mich den meisten Ärger gekostet, da meine
Konfiguration des nginx als Reverse Proxy trotz scheinbar korrekter
Pfadangabe irgendwie in den falschen Verzeichnissen gesucht hat. Eine
Umstellung der Konfigurationsdateien hat da Wunder gewirkt. Man sollte
nicht zu stark an den nginx-Konfigurationsdateien herumoptimieren.
&lt;/p&gt;

&lt;p&gt;
Jetzt hat man die Vorarbeiten abgeschlossen und kann die Zertifikate
anfordern.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-6" class="outline-3"&gt;
&lt;h3 id="sec-1-6"&gt;Anfordern eines Zertifikats&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-6"&gt;
&lt;p&gt;
Der folgende Aufruf fordert das Zertifikat für die Domain an.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python acme_tiny.py --account-key ./account.key --csr ~/requests/example.csr --acme-dir /var/www/challenges/ &amp;gt; ~/certs/example.crt
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Für die Server benötigt man meistens eine Zertifikatskette. In der
Zertifikatskette sind die Zertifikate der Domain und der
unterschreibenden Certification Authority aneinandergehängt. Diese Kette
kann man mit den folgenden Schritten erstellen.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -fsS https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem -o ~/certs/intermediate.pem
cat ~/certs/example.crt intermediate.pem &amp;gt; /etc/ssl/lets/example-chained.pem
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Hier sieht man auch einen Kniff, den ich angewendet habe, um möglichst
eine Trennung der Rechte zu erreichen. Der private Schlüssel der Domain
(&lt;code&gt;example.key&lt;/code&gt;), der nur zur Erstellung des Certificate Requests und
später von Server verwendet wird liegt in einem Verzeichnis, auf das nur
root zugreifen kann. Das Verzeichnis mit den Zertifikaten
(&lt;code&gt;/etc/ssl/lets/&lt;/code&gt; gehört hingegen dem Benutzer &lt;code&gt;lets&lt;/code&gt;, der nur einfacher
Anwender ist. Alle dürfen auf das Verzeichnis nur lesend zugreifen.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-7" class="outline-3"&gt;
&lt;h3 id="sec-1-7"&gt;Erneuern des Zertifikat&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-7"&gt;
&lt;p&gt;
Da das Zertifikate nur 90 Tage gültig ist, muss man vor Ablauf der Frist
ein neues anfordern. Das kann man wie oben beschrieben mit dem gleichen
Aufruf von &lt;code&gt;acme_tiny.py&lt;/code&gt; durchführen. Unter den unix-artigen
Betriebssystemen kann man aber auch ein einfaches Skript erstellen und
von &lt;code&gt;cron&lt;/code&gt; ausführen lassen.
&lt;/p&gt;

&lt;p&gt;
Das folgende Skript funktioniert unter OpenBSD und muss etwas für andere
Unix-Artige angepasst werden. Nennen wir es &lt;code&gt;renew_cert.sh&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="c1"&gt;# Renew certificates with Let's Encrypt&lt;/span&gt;

&lt;span class="nv"&gt;base&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/home/lets"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;acme_tiny&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$base&lt;/span&gt;&lt;span class="s2"&gt;/bin/acme_tiny.py"&lt;/span&gt;
&lt;span class="nv"&gt;chaineddir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/etc/ssl/acme"&lt;/span&gt;

&lt;span class="nv"&gt;accountkey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$base&lt;/span&gt;&lt;span class="s2"&gt;/account.key"&lt;/span&gt;
&lt;span class="nv"&gt;reqsdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$base&lt;/span&gt;&lt;span class="s2"&gt;/reqs"&lt;/span&gt;
&lt;span class="nv"&gt;certsdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$base&lt;/span&gt;&lt;span class="s2"&gt;/certs"&lt;/span&gt;
&lt;span class="nv"&gt;challengedir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/var/www/challenges"&lt;/span&gt;
&lt;span class="nv"&gt;intermediate_cert&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$certsdir&lt;/span&gt;&lt;span class="s2"&gt;/intermediate.pem"&lt;/span&gt;
&lt;span class="nv"&gt;intermediate_cert_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem"&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Downloading intermediate certificate..."&lt;/span&gt;
&lt;span class="c1"&gt;# get intermediate certificate with curl&lt;/span&gt;
&lt;span class="c1"&gt;# -f: fail without writing html garbage to output file&lt;/span&gt;
&lt;span class="c1"&gt;# -s: silent mode without progress meter&lt;/span&gt;
&lt;span class="c1"&gt;# -S: output error message if download fails&lt;/span&gt;
curl -fsS &lt;span class="nv"&gt;$intermediate_cert_url&lt;/span&gt; -o &lt;span class="nv"&gt;$intermediate_cert&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Success."&lt;/span&gt;

&lt;span class="c1"&gt;# The script continues even if the download of the intermediate&lt;/span&gt;
&lt;span class="c1"&gt;# certificate fails. The old intermediate certificate should still&lt;/span&gt;
&lt;span class="c1"&gt;# exist and be useable.&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; csr in &lt;span class="nv"&gt;$reqsdir&lt;/span&gt;/*.csr&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;basename &lt;span class="nv"&gt;$csr&lt;/span&gt; .csr&lt;span class="sb"&gt;`&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Requesting certificate for &lt;/span&gt;&lt;span class="nv"&gt;$domain&lt;/span&gt;&lt;span class="s2"&gt;..."&lt;/span&gt;
  acme_tiny --account-key &lt;span class="nv"&gt;$accountkey&lt;/span&gt; --csr &lt;span class="nv"&gt;$csr&lt;/span&gt; --acme-dir &lt;span class="nv"&gt;$challengedir&lt;/span&gt; &amp;gt; &lt;span class="nv"&gt;$certsdir&lt;/span&gt;/&lt;span class="nv"&gt;$domain&lt;/span&gt;.crt &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Failed!"&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Success."&lt;/span&gt;
  cat &lt;span class="nv"&gt;$certsdir&lt;/span&gt;/&lt;span class="nv"&gt;$domain&lt;/span&gt;.crt &lt;span class="nv"&gt;$intermediate_cert&lt;/span&gt; &amp;gt;&lt;span class="nv"&gt;$chaineddir&lt;/span&gt;/&lt;span class="nv"&gt;$domain&lt;/span&gt;-chained.pem
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Reloading web server configuration..."&lt;/span&gt;
doas /usr/sbin/rcctl reload nginx &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Failed!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Success."&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Damit der Benutzer &lt;code&gt;lets&lt;/code&gt; auch die Webserver-Konfiguration neu laden
kann muss er entsprechende Rechte dafür haben. Das lässt sich unter
OpenBSD schön für genau diesen Zweck eingeschränkt in der Datei
`/etc/doas.conf` mit der folgenden Zeile konfigurieren. Unter anderen
Betriebssystemen muss man entsprechend `sudo` konfigurieren und
verwenden.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;permit&lt;/span&gt; &lt;span class="n"&gt;nopass&lt;/span&gt; &lt;span class="n"&gt;lets&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sbin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rcctl&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="n"&gt;reload&lt;/span&gt; &lt;span class="n"&gt;nginx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Jetzt kann man noch den &lt;code&gt;cron&lt;/code&gt; entsprechend konfigurieren, damit er
einmal im Monat ein neues Zertifikat anfordert. Ich mag es, wenn ich
dann Post bekomme.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MAILTO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cert&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;renew_certs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sieve_of_eratosthenes&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;factors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
	    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
		&lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>administration</category><category>certificate</category><category>python</category><category>security</category><category>tls</category><guid>https://derSuessmann.github.io/posts/zertifikate-von-lets-encrypt-verwenden/</guid><pubDate>Wed, 06 Jul 2016 15:16:50 GMT</pubDate></item></channel></rss>